// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { V1DeleteProjectSessionData, V1DeleteProjectSessionResponse, V1DeleteProjectSessionError, V1GetProjectData, V1GetProjectResponse, V1GetProjectError, V1PostProjectData, V1PostProjectResponse, V1PostProjectError, V1InitProjectData, V1InitProjectResponse, V1InitProjectError, V1GetFmuDirectoryConfigData, V1GetFmuDirectoryConfigResponse, V1GetFmuDirectoryConfigError, V1PatchApiTokenKeyData, V1PatchApiTokenKeyResponse, V1PatchApiTokenKeyError, V1V1HealthCheckData, V1V1HealthCheckResponse, V1V1HealthCheckError, V1CreateSessionData, V1CreateSessionResponse, AppHealthCheckData, AppHealthCheckResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete Project Session
 * Deletes a project .fmu session if it exists.
 */
export const v1DeleteProjectSession = <ThrowOnError extends boolean = false>(options?: Options<V1DeleteProjectSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<V1DeleteProjectSessionResponse, V1DeleteProjectSessionError, ThrowOnError>({
        url: '/api/v1/project/',
        ...options
    });
};

/**
 * Get Project
 * Returns the paths and configuration for the nearest project .fmu directory.
 *
 * This directory is searched for above the current working directory.
 *
 * If the session contains a project .fmu directory already details of that project
 * are returned.
 */
export const v1GetProject = <ThrowOnError extends boolean = false>(options?: Options<V1GetProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V1GetProjectResponse, V1GetProjectError, ThrowOnError>({
        url: '/api/v1/project/',
        ...options
    });
};

/**
 * Post Project
 * Returns the paths and configuration for the project .fmu directory at 'path'.
 */
export const v1PostProject = <ThrowOnError extends boolean = false>(options: Options<V1PostProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V1PostProjectResponse, V1PostProjectError, ThrowOnError>({
        url: '/api/v1/project/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Init Project
 * Initializes .fmu at 'path' and returns its paths and configuration.
 */
export const v1InitProject = <ThrowOnError extends boolean = false>(options: Options<V1InitProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V1InitProjectResponse, V1InitProjectError, ThrowOnError>({
        url: '/api/v1/project/init',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Fmu Directory Config
 * Returns the user configuration of the current session.
 */
export const v1GetFmuDirectoryConfig = <ThrowOnError extends boolean = false>(options?: Options<V1GetFmuDirectoryConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V1GetFmuDirectoryConfigResponse, V1GetFmuDirectoryConfigError, ThrowOnError>({
        url: '/api/v1/user/',
        ...options
    });
};

/**
 * Patch Api Token Key
 * Patches the API key for a known and supported API.
 */
export const v1PatchApiTokenKey = <ThrowOnError extends boolean = false>(options: Options<V1PatchApiTokenKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<V1PatchApiTokenKeyResponse, V1PatchApiTokenKeyError, ThrowOnError>({
        url: '/api/v1/user/api_key',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * V1 Health Check
 * Simple health check endpoint.
 */
export const v1V1HealthCheck = <ThrowOnError extends boolean = false>(options?: Options<V1V1HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V1V1HealthCheckResponse, V1V1HealthCheckError, ThrowOnError>({
        url: '/api/v1/health',
        ...options
    });
};

/**
 * Create Session
 * Establishes a user session.
 */
export const v1CreateSession = <ThrowOnError extends boolean = false>(options?: Options<V1CreateSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<V1CreateSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-fmu-settings-api',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/session',
        ...options
    });
};

/**
 * Health Check
 * Simple health check endpoint.
 */
export const appHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<AppHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppHealthCheckResponse, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};