// This file is auto-generated by @hey-api/openapi-ts

/**
 * A key-value pair for a known and supported API.
 */
export type ApiKeyReadable = {
    id: string;
};

/**
 * A key-value pair for a known and supported API.
 */
export type ApiKeyWritable = {
    id: string;
    key: string;
};

/**
 * Contains the coordinate system known to SMDA.
 */
export type CoordinateSystem = {
    identifier: string;
    uuid: string;
};

/**
 * A single country in the list of countries known to SMDA.
 */
export type CountryItem = {
    identifier: string;
    uuid: string;
};

/**
 * A single discovery in the list of discoveries known to SMDA.
 */
export type DiscoveryItem = {
    short_identifier: string;
    uuid: string;
};

/**
 * Path where a .fmu directory may exist.
 */
export type FmuDirPath = {
    path: string;
};

/**
 * Information returned when 'opening' an FMU Directory.
 */
export type FmuProject = {
    path: string;
    project_dir_name: string;
    config: ProjectConfig;
};

/**
 * A single field in the list of fields known to SMDA.
 */
export type FieldItem = {
    identifier: string;
    uuid: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * The ``masterdata`` block contains information related to masterdata.
 *
 * Currently, SMDA holds the masterdata.
 */
export type Masterdata = {
    smda?: Smda | null;
};

/**
 * A generic message to return to the GUI.
 */
export type Message = {
    message: string;
};

/**
 * The configuration file in a .fmu directory.
 *
 * Stored as config.json.
 */
export type ProjectConfig = {
    version: string;
    created_at: string;
    created_by: string;
    masterdata: Masterdata;
};

/**
 * Information returned when a session is initially created.
 */
export type SessionResponse = {
    user_config: UserConfig;
    fmu_project?: FmuProject | null;
};

/**
 * Contains SMDA-related attributes.
 */
export type Smda = {
    coordinate_system: CoordinateSystem;
    country: Array<CountryItem>;
    discovery: Array<DiscoveryItem>;
    field: Array<FieldItem>;
    stratigraphic_column: StratigraphicColumn;
};

/**
 * Contains the stratigraphic column known to SMDA.
 */
export type StratigraphicColumn = {
    identifier: string;
    uuid: string;
};

/**
 * Known API keys stored in a user config.
 */
export type UserApiKeys = {
    smda_subscription?: string | null;
};

/**
 * The configuration file in a $HOME/.fmu directory.
 *
 * Stored as config.json.
 */
export type UserConfig = {
    version: string;
    created_at: string;
    user_api_keys: UserApiKeys;
    recent_directories: Array<string>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type V1DeleteProjectSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type V1DeleteProjectSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1DeleteProjectSessionError = V1DeleteProjectSessionErrors[keyof V1DeleteProjectSessionErrors];

export type V1DeleteProjectSessionResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type V1DeleteProjectSessionResponse = V1DeleteProjectSessionResponses[keyof V1DeleteProjectSessionResponses];

export type V1GetProjectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type V1GetProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1GetProjectError = V1GetProjectErrors[keyof V1GetProjectErrors];

export type V1GetProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type V1GetProjectResponse = V1GetProjectResponses[keyof V1GetProjectResponses];

export type V1PostProjectData = {
    body: FmuDirPath;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type V1PostProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1PostProjectError = V1PostProjectErrors[keyof V1PostProjectErrors];

export type V1PostProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type V1PostProjectResponse = V1PostProjectResponses[keyof V1PostProjectResponses];

export type V1InitProjectData = {
    body: FmuDirPath;
    path?: never;
    query?: never;
    url: '/api/v1/project/init';
};

export type V1InitProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1InitProjectError = V1InitProjectErrors[keyof V1InitProjectErrors];

export type V1InitProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type V1InitProjectResponse = V1InitProjectResponses[keyof V1InitProjectResponses];

export type V1GetFmuDirectoryConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/';
};

export type V1GetFmuDirectoryConfigErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1GetFmuDirectoryConfigError = V1GetFmuDirectoryConfigErrors[keyof V1GetFmuDirectoryConfigErrors];

export type V1GetFmuDirectoryConfigResponses = {
    /**
     * Successful Response
     */
    200: UserConfig;
};

export type V1GetFmuDirectoryConfigResponse = V1GetFmuDirectoryConfigResponses[keyof V1GetFmuDirectoryConfigResponses];

export type V1PatchApiTokenKeyData = {
    body: ApiKeyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/user/api_key';
};

export type V1PatchApiTokenKeyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1PatchApiTokenKeyError = V1PatchApiTokenKeyErrors[keyof V1PatchApiTokenKeyErrors];

export type V1PatchApiTokenKeyResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type V1PatchApiTokenKeyResponse = V1PatchApiTokenKeyResponses[keyof V1PatchApiTokenKeyResponses];

export type V1V1HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type V1V1HealthCheckErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type V1V1HealthCheckError = V1V1HealthCheckErrors[keyof V1V1HealthCheckErrors];

export type V1V1HealthCheckResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type V1V1HealthCheckResponse = V1V1HealthCheckResponses[keyof V1V1HealthCheckResponses];

export type V1CreateSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/session';
};

export type V1CreateSessionResponses = {
    /**
     * Successful Response
     */
    200: SessionResponse;
};

export type V1CreateSessionResponse = V1CreateSessionResponses[keyof V1CreateSessionResponses];

export type AppHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type AppHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type AppHealthCheckResponse = AppHealthCheckResponses[keyof AppHealthCheckResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8001' | (string & {});
};